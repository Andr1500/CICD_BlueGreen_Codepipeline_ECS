#variables
variables:
  DOCKER_REGISTRY: 138161713046.dkr.ecr.eu-central-1.amazonaws.com
  AWS_DEFAULT_REGION: eu-central-1
  IMAGE_NAME: python-app
  APP_NAME: python-app
  IMAGE_TAG: python-app-1.0
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

#run test
# run_tests:
#   image: python:3.9-slim-buster #we need this image because default docker image is Ruby based on
#   before_script: #set up necessary dependencies
#     - apt-get update && apt-get install make
#   script:
#     - make test

#build docker image and push it to private repo
# build_image:
#   stage: build
#   image: docker:20.10.16
#   services:
#     - docker:20.10.16-dind
#   variables:
#     DOCKER_TLS_CERTDIR: "/certs"
#   before_script:
#     - apt-get install curl && apt-get install zip
#     - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#     - unzip awscliv2.zip
#     - ./aws/install
#     - aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin $AWS_ACCOUNT.dkr.ecr.eu-central-1.amazonaws.com
#   script:
#     - docker build -t $IMAGE_NAME:$IMAGE_TAG .
  #   - docker push $IMAGE_NAME:$IMAGE_TAG

publish:
  image: 
    name: amazon/aws-cli
    entrypoint: [""]
  services:
    - docker:docker:20.10.16-dind
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
  script:
    # - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    # - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    # - aws configure set region $AWS_DEFAULT_REGION
    - mkdir ~/.aws/
    - touch ~/.aws/credentials
    - export NO_PROXY=169.254.169.254
    - printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\nregion = %s\n" "$AWS_ACCESS_KEY_ID" "$AWS_SECRET_ACCESS_KEY" "$AWS_DEFAULT_REGION" >> ~/.aws/credentials
    - cat ~/.aws/credentials
    - aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 138161713046.dkr.ecr.eu-central-1.amazonaws.com
    - docker build -t $DOCKER_REGISTRY/$APP_NAME:$CI_PIPELINE_IID .
    - docker push $DOCKER_REGISTRY/$APP_NAME:$CI_PIPELINE_IID