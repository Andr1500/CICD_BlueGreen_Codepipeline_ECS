#variables
variables:
  DOCKER_REGISTRY: $AWS_ACCOUNT.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  IMAGE_NAME: python-app
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

push_to_codecommit:
  stage: deploy
  before_script:
    - 'which ssh-agent || ( apt-get update -qy && apt-get install openssh-client -qqy )'
    - eval `ssh-agent -s`
    - rm -rf /builds/Andr1500/CICD_flask_app_with_BlueGreen/.git
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_PRIVATE_KEY" >> ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host git-codecommit.*.amazonaws.com\n  User APKASAKYUN6LICIFOTJK\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/id_rsa" > ~/.ssh/config
    - cat ~/.ssh/config
    - ssh-keyscan -t rsa git-codecommit.eu-central-1.amazonaws.com >> ~/.ssh/known_hosts
    - cat ~/.ssh/known_hosts
  script:
    - git init
    - git add .
    - git commit -m "initial commit"
    - git config --global user.email "gitlab_push@push"
    - git config --global user.name "APKASAKYUN6LICIFOTJK"
    - git remote add origin ssh://git-codecommit.eu-central-1.amazonaws.com/v1/repos/from_gitlab
    - git branch main
    - git checkout main
    - git pull origin main --allow-unrelated-histories
    - git remote -v
    - ls -l
    - pwd
    - touch test.txt
    - git add .
    - git commit -m "initial commit"
    - chmod -Rf u+w /builds/Andr1500/CICD_flask_app_with_BlueGreen
    # - git add -f . # Force add PDF since we .gitignored it
    # - git commit -m "Compiled from $CI_COMMIT_SHORT_SHA"
    # - git commit -m "Compiledfrom $CI_COMMIT_SHORT_SHA [skip ci]" || echo "No changes, nothing to commit!"
    # - git remote rm origin && git remote add origin ssh://git-codecommit.eu-central-1.amazonaws.com/v1/repos/from_gitlab
    - git push  origin HEAD:main # Pushes to the same branch as the trigger

# #steps, run one by one
# stages:
#   - test
#   - build
#   - deploy
#   - blue_green
#
# #run test
# run_tests:
#   stage: test
#   image: python:3.9-slim-buster #we need this image because default docker image is Ruby based on
#   before_script: #set up necessary dependencies
#     - apt-get update && apt-get install make
#   script:
#     - make test
#
# #build docker image and push it to private repo
# build_push_image:
#   stage: build
#   image:
#     name: amazon/aws-cli
#     entrypoint: [""]
#   services: #interract between main container and dind container
#     - docker:dind
#   before_script:
#     - amazon-linux-extras install docker
#     - aws --version
#     - docker --version
#   script:
#     - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $DOCKER_REGISTRY
#     - docker build -t $DOCKER_REGISTRY/$IMAGE_NAME:$CI_PIPELINE_IID .
#     - docker push $DOCKER_REGISTRY/$IMAGE_NAME:$CI_PIPELINE_IID
#
# #deploy app on EC2 instance
# deploy:
#   stage: deploy
#   image:
#     name: amazon/aws-cli
#     entrypoint: [""]
#   services: #interract between main container and dind container
#     - docker:dind
#   before_script:
#     - amazon-linux-extras install docker
#     - yum  install openssh-clients -y
#     - yum  install openssh-server -y
#     # - service sshd start
#     - aws --version
#     - docker --version
#     - chmod 400 $SSH_KEY
#   script: #ssh on remote host and execute commands on the host
#     - ssh -o StrictHostKeyChecking=no -i $SSH_KEY $BUILD_HOST_USER@$BUILD_HOST_IP "
#         export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" &&
#         export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" &&
#         aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $DOCKER_REGISTRY &&
#         docker ps -a -q --filter name="python-app2" | xargs -r docker stop | xargs -r docker rm &&
#         docker ps -a -q --filter name="python-app1" && docker run --name python-app2 -d -p 5000:5000 $DOCKER_REGISTRY/$IMAGE_NAME:$CI_PIPELINE_IID || docker run --name python-app1 -d -p 80:5000 $DOCKER_REGISTRY/$IMAGE_NAME:$CI_PIPELINE_IID"
#
# blue_green:
#   stage: blue_green
#   when: manual
#   image:
#     name: amazon/aws-cli
#     entrypoint: [""]
#   services: #interract between main container and dind container
#     - docker:dind
#   before_script:
#     - yum  install openssh-clients -y
#     - yum  install openssh-server -y
#     # - service sshd start
#     - aws --version
#     - chmod 400 $SSH_KEY
#   script: #ssh on remote host and execute commands on the host
#     - ssh -o StrictHostKeyChecking=no -i $SSH_KEY $BUILD_HOST_USER@$BUILD_HOST_IP "
#         sudo lsof -i -P -n | grep LISTEN | grep 80  && echo "port 80 is busy" || echo "port 80 is not busy" &&
#         docker ps -a -q --filter name="python-app1" | xargs -r docker stop | xargs -r docker rm &&
#         docker run --name "python-app1" -d -p 80:5000 $DOCKER_REGISTRY/$IMAGE_NAME:$CI_PIPELINE_IID &&
#         docker ps -a -q --filter name="python-app2" | xargs -r docker stop | xargs -r docker rm &&
#         docker image prune -a -f"
